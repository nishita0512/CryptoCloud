// Generated by view binder compiler. Do not edit!
package com.example.cryptocloud.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cryptocloud.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CryptoFileSingleRowBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView btnMenuFileSingleRow;

  @NonNull
  public final MaterialCardView imgFileCardViewSingleRow;

  @NonNull
  public final ImageView imgFileSingleRow;

  @NonNull
  public final ConstraintLayout mainLayoutCryptoFileSingleRow;

  @NonNull
  public final TextView txtFileNameSingleRow;

  @NonNull
  public final TextView txtFileOwnerNameSingleRow;

  private CryptoFileSingleRowBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView btnMenuFileSingleRow, @NonNull MaterialCardView imgFileCardViewSingleRow,
      @NonNull ImageView imgFileSingleRow, @NonNull ConstraintLayout mainLayoutCryptoFileSingleRow,
      @NonNull TextView txtFileNameSingleRow, @NonNull TextView txtFileOwnerNameSingleRow) {
    this.rootView = rootView;
    this.btnMenuFileSingleRow = btnMenuFileSingleRow;
    this.imgFileCardViewSingleRow = imgFileCardViewSingleRow;
    this.imgFileSingleRow = imgFileSingleRow;
    this.mainLayoutCryptoFileSingleRow = mainLayoutCryptoFileSingleRow;
    this.txtFileNameSingleRow = txtFileNameSingleRow;
    this.txtFileOwnerNameSingleRow = txtFileOwnerNameSingleRow;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CryptoFileSingleRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CryptoFileSingleRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.crypto_file_single_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CryptoFileSingleRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnMenuFileSingleRow;
      ImageView btnMenuFileSingleRow = ViewBindings.findChildViewById(rootView, id);
      if (btnMenuFileSingleRow == null) {
        break missingId;
      }

      id = R.id.imgFileCardViewSingleRow;
      MaterialCardView imgFileCardViewSingleRow = ViewBindings.findChildViewById(rootView, id);
      if (imgFileCardViewSingleRow == null) {
        break missingId;
      }

      id = R.id.imgFileSingleRow;
      ImageView imgFileSingleRow = ViewBindings.findChildViewById(rootView, id);
      if (imgFileSingleRow == null) {
        break missingId;
      }

      ConstraintLayout mainLayoutCryptoFileSingleRow = (ConstraintLayout) rootView;

      id = R.id.txtFileNameSingleRow;
      TextView txtFileNameSingleRow = ViewBindings.findChildViewById(rootView, id);
      if (txtFileNameSingleRow == null) {
        break missingId;
      }

      id = R.id.txtFileOwnerNameSingleRow;
      TextView txtFileOwnerNameSingleRow = ViewBindings.findChildViewById(rootView, id);
      if (txtFileOwnerNameSingleRow == null) {
        break missingId;
      }

      return new CryptoFileSingleRowBinding((ConstraintLayout) rootView, btnMenuFileSingleRow,
          imgFileCardViewSingleRow, imgFileSingleRow, mainLayoutCryptoFileSingleRow,
          txtFileNameSingleRow, txtFileOwnerNameSingleRow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
